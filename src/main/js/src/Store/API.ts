/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming


export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:8080";
    }

    /**
     * Get friends ratings
     * @return OK
     */
    getFriendRatingsUsingGET(): Promise<FriendRatingDTO[] | null> {
        let url_ = this.baseUrl + "/api/v1/friends";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFriendRatingsUsingGET(_response);
        });
    }

    protected processGetFriendRatingsUsingGET(response: Response): Promise<FriendRatingDTO[] | null> {
        const status = response.status;
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: FriendRatingDTO[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(FriendRatingDTO.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText);
            });
        }
        return Promise.resolve<FriendRatingDTO[] | null>(<any>null);
    }
}

export class FriendRatingDTO implements IFriendRatingDTO {
    assists?: number | undefined;
    deaths?: number | undefined;
    gamesPlayed?: number | undefined;
    id?: number | undefined;
    kda?: number | undefined;
    kills?: number | undefined;
    rating?: FriendRatingDTORating | undefined;
    summonerName?: string | undefined;
    wins?: number | undefined;

    constructor(data?: IFriendRatingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.assists = data["assists"];
            this.deaths = data["deaths"];
            this.gamesPlayed = data["gamesPlayed"];
            this.id = data["id"];
            this.kda = data["kda"];
            this.kills = data["kills"];
            this.rating = data["rating"];
            this.summonerName = data["summonerName"];
            this.wins = data["wins"];
        }
    }

    static fromJS(data: any): FriendRatingDTO {
        let result = new FriendRatingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assists"] = this.assists;
        data["deaths"] = this.deaths;
        data["gamesPlayed"] = this.gamesPlayed;
        data["id"] = this.id;
        data["kda"] = this.kda;
        data["kills"] = this.kills;
        data["rating"] = this.rating;
        data["summonerName"] = this.summonerName;
        data["wins"] = this.wins;
        return data;
    }
}

export interface IFriendRatingDTO {
    assists?: number | undefined;
    deaths?: number | undefined;
    gamesPlayed?: number | undefined;
    id?: number | undefined;
    kda?: number | undefined;
    kills?: number | undefined;
    rating?: FriendRatingDTORating | undefined;
    summonerName?: string | undefined;
    wins?: number | undefined;
}

export enum FriendRatingDTORating {
    SOLO = <any>"SOLO",
    FLEX = <any>"FLEX",
    NORMS = <any>"NORMS",
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    result: any;

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, null);
}